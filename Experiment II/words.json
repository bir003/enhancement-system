{"subscriptable": "An object is subscriptable when it contains other objects, like for instance lists, tuples, and dictionaries.", "callable": "A function is callable, however an integer value or list is not", "iterable": "A list or range of numbers are iterable. It means that you step through the object (list, dict keys, range(100)) as a collection from start to end", "object": "Everything in Python is a object. Lists, strings, variables, dictionaries. A Class is a blueprint for what the object can access and do. 'object' is synonymous to 'instance'", "attribute": "Attributes belong to one specific object (instance attribute) or to the object's class (class attribute). To see all the attributes available to an object or variable, print dir(variable_name)", "class": "A class is like a blueprint for what functionality an object have. Usually it contains a constructor (__init__), some functions, and variables holding information about the object.", "enumerate": "Enumerate allows you to loop through something while having a counter. For example for i, x in some_list_of_objects, 'i' will go from 0 to the end of the list, while x will be each object in the list from position 0 to the end of the list. ", "modulo": "Modulo finds the remainder after dividing one number by the other. For example 9%3 = 0, while 9%2 = 1. The simple way is to think; how many times can i multiply the divisor with a number, while it remains less than or equal to the number being divided. 2*4 = 8, 8+1 = 9 -> 1 remainder.", "argument": "An argument is the actual value which is passed to a function. For example calling the function add(1,2), 1 and 2 are the arguments. In the line def add(a, b), a and b are called parameters.", "self": "Self is needed because it refers to your newly created object. It is through 'self.'' that you can access the specific functionality and charateristics of an object, for eksample self.color is 'blue' for one object, while another object might have self.color equal to 'red'.", "instance": "An instance emphasizes the distinct identity of one specific class or type.  'instance' is synonymous to 'object. Each realized version of one specific class is an instance and different to other instances. In a non-programming context, 'Lassie' and 'Rex' are both instances of the class 'Dog'"}